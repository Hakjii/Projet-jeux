# coding : utf-8
'''
Auteurs : Thibault BEN GRINE
          Baptiste QUANTIN
          Pierrick LEFEVRE
Licence : Creative commons  CC BY-NC-SA
Version : 4.2
Lien vers le github : https://github.com/Hakjii/Projet-jeux

Ce programme a été crée pour le projet Jeux du cours de NSI 1ère de M.Landry
Le jeux choisi est mastermind
Ce programme permet donc de faire jouer plusieurs joueurs de manière aléatoire et ensuite de les trier par score croissant et enfin de donner une moyenne de leurs scores
'''
from random import randint

# tirage de 4 nombres aléatoires pour le joueur et le mdj dans une liste

tableau_personnages = []
with open("Characters.csv", mode='r', encoding='utf-8') as f:
    lines = f.readlines()
    key_line = lines[0].strip()
    cles = key_line.split(";")
    for line in lines[1:]:
        line = line.strip()
        valeurs = line.split(';')
        dico = {}
        for i in range(len(cles)):
            dico[cles[i]] = valeurs[i]
        tableau_personnages.append(dico)

    
# prend le fichier csv et le transforme en liste de dicos suivant la 
# méthode du cours 3_5P

def tour_de_jeu():
    """
    Permet de faire un tour de jeu à l'aide de la fonction randint qui choisi aléatoirement 4 nombre
    entre 10 et 25
    Entrées : pas d'entrées
    Sortie : 4 nombre entier compris entre 10 et 25 pour le maitre du jeu et pour le joueur
    """
    tirage_maitre_du_jeu = [randint(10, 25) for i in range(4)]
    tirage_joueur = [randint(10, 25) for i in range(4)]

    assert type(tirage_joueur) and type(tirage_maitre_du_jeu) == list, "les tirages doivent être de type list"

    return tirage_maitre_du_jeu, tirage_joueur
# tirage de 4 nombres aléatoires pour le joueur et le mdj dans une liste + un calcul des 
# scores a partir de la fonction calculer score

def calculer_score(maitre_du_jeu, joueur):
    """
    Calcule le score du joueur en fonction du nombre d'éléments similaires entre le tirage du joueur 
    et celui du maitre du jeu
    Entrées : deux listes correspondant au tirage du joueur et celui du maitre du jeu
    Sortie : des entiers (0, 1, 3, 8 ou 20) correspondant aux score du personnage selon le nombre
    d'éléments similaires
    """
    elements_similaires = 0
    for nombre in maitre_du_jeu:
        if nombre in joueur:
            elements_similaires += 1

    assert elements_similaires >= 0 , "il n'est pas possible d'avoir un nombre d'éléments similaires négatif"

    if elements_similaires == 1:
        return 1
    elif elements_similaires == 2:
        return 3
    elif elements_similaires == 3:
        return 8
    elif elements_similaires == 4:
        return 20
    else:
        return 0
# calcule les scores du joueur en fonction du nombre d'éléments similaires avec les éléments du mdj

def tour_personnage(personnage):
    """
    Permet de faire jouer le personnage et de calculer son score grâce aux fonctions précédentes
    Entrée : le personnage qu'on souhaite faire jouer
    Sortie : un score correspondant au personnage
    """
    tirage_maitre_du_jeu, tirage_joueur = tour_de_jeu()
    score = calculer_score(tirage_maitre_du_jeu, tirage_joueur)
    return score


scores_personnages = []
moyenne = 0

for personnage in tableau_personnages:
    score_total = 0
    for i in range(10):
        score = tour_personnage(personnage)
        score_total += score
    scores_personnages.append((personnage['Name'], score_total))

    
    for j in range (1, len(scores_personnages)):
        while scores_personnages[j][1] > scores_personnages[j - 1][1] and j > 0:
            scores_personnages[j], scores_personnages[j - 1] = scores_personnages[j - 1], scores_personnages[j]
            j = j - 1
    

    moyenne += score_total
moyenne = moyenne / len(tableau_personnages)

print('Nom : Score\n')

for pers in range(len(scores_personnages)):
    print(scores_personnages[pers][0] + ' : ' + str(scores_personnages[pers][1]))
print(f'\nMoyenne : \n{moyenne}')
